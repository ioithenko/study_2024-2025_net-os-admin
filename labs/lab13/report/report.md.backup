---
## Front matter
title: "Отчёт по лабораторной работе №13"
subtitle: "Администрирование сетевых подсистем"
author: "Ищенко Ирина НПИбд-02-22"

## Generic otions
lang: ru-RU
toc-title: "Содержание"

## Bibliography
bibliography: bib/cite.bib
csl: pandoc/csl/gost-r-7-0-5-2008-numeric.csl

## Pdf output format
toc: true # Table of contents
toc-depth: 2
lof: true # List of figures
lot: true # List of tables
fontsize: 12pt
linestretch: 1.5
papersize: a4
documentclass: scrreprt
## I18n polyglossia
polyglossia-lang:
  name: russian
  options:
	- spelling=modern
	- babelshorthands=true
polyglossia-otherlangs:
  name: english
## I18n babel
babel-lang: russian
babel-otherlangs: english
## Fonts
mainfont: IBM Plex Serif
romanfont: IBM Plex Serif
sansfont: IBM Plex Sans
monofont: IBM Plex Mono
mathfont: STIX Two Math
mainfontoptions: Ligatures=Common,Ligatures=TeX,Scale=0.94
romanfontoptions: Ligatures=Common,Ligatures=TeX,Scale=0.94
sansfontoptions: Ligatures=Common,Ligatures=TeX,Scale=MatchLowercase,Scale=0.94
monofontoptions: Scale=MatchLowercase,Scale=0.94,FakeStretch=0.9
mathfontoptions:
## Biblatex
biblatex: true
biblio-style: "gost-numeric"
biblatexoptions:
  - parentracker=true
  - backend=biber
  - hyperref=auto
  - language=auto
  - autolang=other*
  - citestyle=gost-numeric
## Pandoc-crossref LaTeX customization
figureTitle: "Рис."
tableTitle: "Таблица"
listingTitle: "Листинг"
lofTitle: "Список иллюстраций"
lotTitle: "Список таблиц"
lolTitle: "Листинги"
## Misc options
indent: true
header-includes:
  - \usepackage{indentfirst}
  - \usepackage{float} # keep figures where there are in the text
  - \floatplacement{figure}{H} # keep figures where there are in the text
---

# Цель работы

Приобретение практических навыков настройки сервера NFS для удалённого доступа к ресурсам.

# Выполнение лабораторной работы

На сервере установим необходимое программное обеспечение:

```
dnf -y install nfs-utils
```

Затем создадим каталог, который предполагается сделать доступным всем пользователям сети (корень дерева NFS):

```
mkdir -p /srv/nfs
```

В файле /etc/exports пропишем подключаемый через NFS общий каталог с доступом только на чтение(рис. [-@fig:001]):

![Подключение через NFS каталога только на чтение](image/1.png){#fig:001 width=70%}

Для общего каталога зададим контекст безопасности NFS и применим изменённую настройку SELinux к файловой системе, затем запустим сервер NFS и настроим межсетевой экран для работы сервера NFS(рис. [-@fig:002]):

![Запуск NFS-сервера](image/2.png){#fig:002 width=70%}

На клиенте установим необходимое для работы NFS программное обеспечение:
```
dnf -y install nfs-utils
```
Попробуем посмотреть имеющиеся подмонтированные удалённые ресурсы([-@fig:003]):

![Просмотр подмонтированных удалённых ресурсов на клиенте](image/3.png){#fig:003 width=70%}

Увидим, что протокол удалённого вызова процедур (RPC) не может получить доступ к запрашиваемым ресурсам. 

На сервере остановим сервис межсетевого экрана (рис. [-@fig:004]) и на клиенте вновь попробуем подключиться к удалённо смонтированному ресурсу (рис. [-@fig:005]):

![Остановка сервиса межсетевого экрана](image/4.png){#fig:004 width=70%}

![Просмотр подмонтированных удалённых ресурсов на клиенте](image/5.png){#fig:005 width=70%}

Теперь подключение к удаленно смонтированному ресурсу успешно произведено.

На сервере запустим сервис межсетевого экрана и посмотрим, какие службы задействованы при удалённом монтировании(рис. [-@fig:006] и [-@fig:007]):

![Просмотр задействованных при удалённом монтировании служб](image/6.png){#fig:006 width=70%}

![Просмотр задействованных при удалённом монтировании служб](image/7.png){#fig:007 width=70%}

Затем добавим службы rpc-bind и mountd в настройки межсетевого экрана на сервере(рис. [-@fig:008]):

![Добавление служб rpc-bind и mountd в настройки межсетевого экрана](image/8.png){#fig:008 width=70%}

Теперь на клиенте проверим подключение удалённого ресурса(рис. [-@fig:009]):

![Проверка подключения удалённого ресурса на клиенте](image/9.png){#fig:009 width=70%}

На клиенте создадим каталог, в который будет монтироваться удалённый ресурс, и подмонтируем дерево NFS (рис. [-@fig:010]). Затем проверим, что общий ресурс NFS подключён правильно(рис. [-@fig:011]):

![Монтирование дерева NFS](image/10.png){#fig:010 width=70%}

![Проверка подключения ресурса](image/11.png){#fig:011 width=70%}

На клиенте в конце файла /etc/fstab добавьте следующую запись(рис. [-@fig:012]):

![Добавление записи в файл /etc/fstab на клиенте](image/12.png){#fig:012 width=70%}

Мы подключаем каталоги сервера для автоматического монтирования при загрузке через nfs, для этого указываются каталоги и _netdev -- опция, указывающая, что данный ресурс является сетевым(то есть монтироваться каталоги будут после загрузки сетевой подсистемы).

На клиенте проверьте наличие автоматического монтирования удалённых ресурсов
при запуске операционной системы(рис. [-@fig:013]):

![Проверка наличия автоматического монтирования удалённых ресурсов при запуске ОС](image/13.png){#fig:013 width=70%}

Перезапустим клиента и убедимся, что удалённый ресурс подключается автоматически(рис. [-@fig:014]):

![Проверка автоматического подключения удалённого ресурса](image/14.png){#fig:014 width=70%}


На сервере создадим общий каталог, в который затем будет подмонтирован каталог
с контентом веб-сервера и подмонтируем каталог web-сервера. На сервере проверим, что отображается в каталоге /srv/nfs(рис. [-@fig:015])

![Проверка содержимого /srv/nfs](image/15.png){#fig:015 width=70%}

На клиенте проверим, что отображается в каталоге /mnt/nfs(рис. [-@fig:016])

![Проверка содержимого /mnt/nfs](image/16.png){#fig:016 width=70%}

На сервере в файле /etc/exports добавьте экспорт каталога веб-сервера с удалённого
ресурса(рис. [-@fig:017])

![Добавление в файл /etc/exports экспорт каталога веб-сервера](image/17.png){#fig:017 width=70%}

Экспортируем все каталоги, упомянутые в файле /etc/exports командной `exportfs -r`.
Проверим на клиенте каталог /mnt/nfs(рис. [-@fig:018])

![Проверка содержимого /mnt/nfs](image/18.png){#fig:018 width=70%}

На сервере в конце файла /etc/fstab добавим следующую запись(рис. [-@fig:019])

![Добавление записи в файл /etc/fstab](image/19.png){#fig:019 width=70%}

Повторно экспортируем каталоги, указанные в файле /etc/exports и на клиенте проверим каталог /mnt/nfs(рис. [-@fig:020])

![Проверка содержимого /mnt/nfs](image/20.png){#fig:020 width=70%}

На сервере под пользователем ioithenko в домашнем каталоге создадим каталог common с полными правами доступа только для этого пользователя, а в нём файл ioithenko@server.txt.

На сервере создадим общий каталог для работы пользователя ioithenko по сети, подмонтируем каталог common пользователя ioithenko в NFS (рис. [-@fig:021]):

![Проверка прав доступа на каталог](image/21.png){#fig:021 width=70%}

Подключим каталог пользователя в файле /etc/exports, прописав в нём(рис. [-@fig:022]):

![Подключение каталога пользователя в файле /etc/exports](image/22.png){#fig:022 width=70%}

Внесем изменения в файл /etc/fstab(рис. [-@fig:023]):

![Добавление записи в файл /etc/fstab](image/23.png){#fig:023 width=70%}

Затем повторно экспортируем каталоги и проверим на клиенте каталог mnt/nfs.
На клиенте попробуем создать файл в каталоге /mnt/nfs/home/ioithenko под пользователями ioithenko и root (рис. [-@fig:024]):

![Проверка содержимого /mnt/nfs](image/24.png){#fig:024 width=70%}

У пользователя root нет прав на переход в эту директорию, пользователь ioithenko может и перейти, и создать файл.

Проверим появились ли изменения на сервере(рис. [-@fig:025]):

![Скрипта файла /vagrant/provision/server/nfs.sh](image/25.png){#fig:025 width=70%}

Действительно, созданный файл отразились на сервере.

На виртуальной машине server перейдем в каталог для внесения изменений в настройки внутреннего окружения /vagrant/provision/server/, создадим в нём каталог nfs, в который поместим в соответствующие подкаталоги конфигурационные файлы.

В каталоге /vagrant/provision/server создадим исполняемый файл nfs.sh и внесем скрипт.
В каталоге /vagrant/provision/client создадим исполняемый файл nfs.sh и внесем скрипт.
Затем для отработки созданных скриптов в конфигурационном файле Vagrantfile необходимо добавить в соответствующих разделах конфигураций для сервера и клиента:

```
server.vm.provision "server nfs",
  type: "shell",
  preserve_order: true,
  path: "provision/server/nfs.sh"

client.vm.provision "client nfs",
  type: "shell",
  preserve_order: true,
  path: "provision/client/nfs.sh"

```

# Выводы

В результате выполнения лабораторной работы я приобрела практические навыки настройки сервера NFS для удалённого доступа к ресурсам.

# Контрольные вопросы

1. Как называется файл конфигурации, содержащий общие ресурсы NFS?

Файл конфигурации, содержащий общие ресурсы NFS, называется /etc/exports.
 
2. Какие порты должны быть открыты в брандмауэре, чтобы обеспечить полный доступ к серверу NFS?

Для полного доступа к серверу NFS следует открыть TCP и UDP порты 2049 в брандмауэре.

3. Какую опцию следует использовать в /etc/fstab, чтобы убедиться, что общие ресурсы NFS могут быть установлены автоматически при перезагрузке?

Для автоматической установки общих ресурсов NFS при перезагрузке следует использовать опцию "auto" в /etc/fstab.